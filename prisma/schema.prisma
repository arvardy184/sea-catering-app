generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  password      String?
  emailVerified DateTime?      @map("email_verified")
  image         String?
  role          Role           @default(USER)
  phone         String?
  address       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  testimonials  Testimonial[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Subscription {
  id           String   @id @default(cuid())
  name         String
  phone        String
  plan         String
  mealTypes    String
  deliveryDays String
  allergies    String?
  totalPrice   Float
  status       String   @default("active") // active, paused, cancelled
  pauseStart   DateTime?
  pauseEnd     DateTime?
  cancelledAt  DateTime?
  reactivatedAt DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?  @map("user_id")
  user         User?    @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model MealPlan {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String
  price       Float
  calories    Int
  cookingTime String
  rating      Float    @default(4.5)
  tags        String
  popular     Boolean  @default(false)
  protein     Float?
  carbs       Float?
  fats        Float?
  fiber       Float?
  ingredients String?
  allergens   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("meal_plans")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  message   String
  rating    Int
  location  String?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])

  @@map("testimonials")
}

enum Role {
  USER
  ADMIN
}
