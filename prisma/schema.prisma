// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // For credentials login
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(USER)
  phone         String?
  address       String?
  
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  testimonials  Testimonial[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  ADMIN
}

// Business Models
model Subscription {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id") // Optional for guest orders
  name         String
  phone        String
  plan         String   // 'diet' | 'protein' | 'royal'
  mealTypes    String   // JSON string array
  deliveryDays String   // JSON string array
  allergies    String?
  totalPrice   Float
  status       String   @default("active")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model MealPlan {
  id           String  @id @default(cuid())
  name         String
  category     String
  description  String
  price        Float
  calories     Int
  cookingTime  String
  rating       Float   @default(4.5)
  tags         String  // JSON string array
  popular      Boolean @default(false)
  
  // Nutrition info
  protein      Float?
  carbs        Float?
  fats         Float?
  fiber        Float?
  
  ingredients  String? // JSON string array
  allergens    String? // JSON string array
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("meal_plans")
}

model Testimonial {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id") // Optional for guest testimonials
  name      String
  message   String
  rating    Int      // 1-5
  location  String?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("testimonials")
}
